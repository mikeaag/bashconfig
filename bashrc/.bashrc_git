# Git
# help: [A] `gs` - Git status
alias gs='git status -sb'
# help: [A] `gpl` - Git pull
alias gpl='git pull'
# help: [A] `gps` - Git push
alias gps='git push'
# help: [A] `gf` - git fetch
alias gf='git fetch'
# help: [A] `gfs` - git fetch and show status
alias gfs='gf; gs'
# help: [A] `gbr` â€“ git branch (styled)
# src: http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
alias gbr='git for-each-ref --sort=-committerdate refs/heads/ --format="%(HEAD) %(color:yellow)%(refname:short)%(color:reset) %(color:bold blue)%(objectname:short)%(color:reset) %(contents:subject) %(color:green)(%(committerdate:relative))%(color:reset) %(color:bold blue)<%(authorname)>%(color:reset)"'
# help: [A] `ga` - git add
alias ga='git add'
# help: [A] `gaa` - git add .
alias gaa='git add --all && gs'
# help: [A] `gap` - git add -p
alias gap='git add -p'
# help: [A] `gr` - git reset
alias gr='git reset'
# help: [A] `gc` - git commit
alias gc='git commit'
# help: [A] `gcwip` - commit everything with 'wip' as message
alias gcwip='gcam "wip"'
# help: [A] `gcwerp` - pop last commit off back to working tree (the reverse of gcwip)
alias gcwerp='git reset head^'
# help: [A] `gl` - pretty git log
alias gl='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
# help: [A] `gll` - git log with changed files
alias gll='git log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat'
# help: [A] `glh` - show head log
alias glh='gl -1'
# help: [A] `gsu` - add everything to git stash
alias gsu='git stash -u'
# help: [A] `gsp` - reapply latest stash
alias gsp='git stash pop'
# help: [A] `gcred` - set credentials to store (only needs to be called once)
alias gcred='git config credential.helper "store"'
# help: [A] `gck` - git checkout
alias gck='git checkout'
# help: [A] `gckd` - checkout develop
alias gckd='gck develop'
# help: [A] `gckm` - checkout master
alias gckm='gck master'
# help: [A] `gck-` - go back to the previous branch
alias gck-='gck -'
# help: [A] `gapplygitignore` - Applies gitignore to commited files
alias gapplygitignore='git rm -r --cached .'
# help: [A] `gcl` - git clone
alias gcl='git clone'


## Functions

# help: [F] `gcm` - Git Commit With Message
# help:     [P] Commit Message
gcm () {
    gc -m "$1"
}

# help: [F] `gcmp` - Git Commit With Message Then Push
# help:     [P] Commit Message
gcmp () {
    gcm "$1" && gps
}

# help: [F] `gcam` - Git Commit All With Message
# help:     [P] Commit Message
gcam () {
    gaa && gc -m "$1"
}

# help: [F] `gcamp` - Git Commit All With Message Then Push
# help:     [P] Commit Message
gcamp () {
    gcam "$1" && gps
}

# help: [F] `gri` - Git rebase interactive (rebase X latest commits together)
# help:     [P] Number of commits to rebase
gri() {
  git rebase -i head~$1
}

# help: [F] `gcr` - Git change remote
# help:     [P] New remote URL
gcr() {
  git remote -v;
  git remote rm destination;
  git remote -v;
  git remote add origin $1;
  git remote -v;
}

finishedLoading="${finishedLoading}This is from the git file\n"
